import{_ as n,c as s,o as a,d as t}from"./app.9fda2e54.js";const y='{"title":"\u624B\u5199getQueryString","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u624B\u5199getQueryString","slug":"\u624B\u5199getquerystring"},{"level":2,"title":"\u624B\u5199\u5B9E\u73B0setInterval","slug":"\u624B\u5199\u5B9E\u73B0setinterval"},{"level":2,"title":"\u539F\u578B\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F","slug":"\u539F\u578B\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F"},{"level":2,"title":"class\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F","slug":"class\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F"},{"level":2,"title":"\u624B\u5199call","slug":"\u624B\u5199call"},{"level":2,"title":"\u624B\u5199apply","slug":"\u624B\u5199apply"},{"level":2,"title":"\u624B\u5199bind","slug":"\u624B\u5199bind"}],"relativePath":"pages/js/javascriptAD.md"}',p={},o=t(`<h2 id="\u624B\u5199getquerystring" tabindex="-1">\u624B\u5199getQueryString <a class="header-anchor" href="#\u624B\u5199getquerystring" aria-hidden="true">#</a></h2><p>\u7ED9\u5B9A\u4E00\u6BB5URL\u548C\u53C2\u6570\u7684\u540D\u79F0\uFF0C\u83B7\u53D6\u6B64\u53C2\u6570\u7684\u503C</p><div class="language-js"><pre><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.baidu.com/s?id=123&amp;name=zhangsan&amp;phone=11012018011&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//\u53BB\u5168\u90E8\u53C2\u6570\u7684\u8BDD</span>
<span class="token keyword">function</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
  <span class="token keyword">var</span> index<span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
  str<span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> splitItem<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>splitItem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> splitItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//\u5982\u679C\u8981\u53BB\u5168\u90E8\u53C2\u6570,\u53EF\u4EE5\u8FD4\u56DE\u4E00\u4E2A\u5BF9\u8C61 \u6CE8\u91CA\u4E0A\u65B9if\u6761\u4EF6</span>
    obj<span class="token punctuation">[</span>splitItem<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>splitItem<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//{id: &#39;123&#39;, name: &#39;zhang san&#39;, phone: &#39;11012018011&#39;}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//zhangsan</span>
</code></pre></div><h2 id="\u624B\u5199\u5B9E\u73B0setinterval" tabindex="-1">\u624B\u5199\u5B9E\u73B0setInterval <a class="header-anchor" href="#\u624B\u5199\u5B9E\u73B0setinterval" aria-hidden="true">#</a></h2><p>\u4F7F\u7528requestAnimatianFrame\u5B9E\u73B0</p><div class="language-js"><pre><code><span class="token keyword">const</span> myObj<span class="token operator">=</span><span class="token punctuation">{</span>
  <span class="token literal-property property">timer</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token function-variable function">setInterval</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span>interval</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> now<span class="token operator">=</span>Date<span class="token punctuation">.</span>now<span class="token comment">//\u65F6\u95F4\u6233\u51FD\u6570</span>
    <span class="token keyword">let</span> startTime<span class="token operator">=</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//\u5F53\u524D\u65F6\u95F4\u6233</span>
    <span class="token keyword">let</span> endTime<span class="token operator">=</span>startTime<span class="token comment">//\u7ED3\u675F\u7684</span>
    <span class="token keyword">const</span> self<span class="token operator">=</span><span class="token keyword">this</span><span class="token comment">//\u4FDD\u5B58\u4E0A\u4E0B\u6587</span>
    <span class="token keyword">const</span> <span class="token function-variable function">loop</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      self<span class="token punctuation">.</span>timer<span class="token operator">=</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token comment">//</span>
      endTime<span class="token operator">=</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime <span class="token operator">&gt;=</span> interval<span class="token punctuation">)</span><span class="token punctuation">{</span>
        startTime<span class="token operator">=</span>endTime<span class="token operator">=</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        callback<span class="token operator">&amp;&amp;</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token operator">=</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token comment">//</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timer
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">clearInterval</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">let</span> count<span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">const</span> timer<span class="token operator">=</span>myObj<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;interval...&quot;</span><span class="token punctuation">)</span>
  count<span class="token operator">++</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&gt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    myObj<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="\u539F\u578B\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F" tabindex="-1">\u539F\u578B\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F <a class="header-anchor" href="#\u539F\u578B\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token operator">=</span>value
<span class="token punctuation">}</span>

<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getValue</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> child<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

child<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>
child instanceif Parent <span class="token comment">//true</span>
</code></pre></div><h2 id="class\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F" tabindex="-1">class\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F <a class="header-anchor" href="#class\u5982\u4F55\u5B9E\u73B0\u7EE7\u627F" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> value
   <span class="token punctuation">}</span>
   <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span>
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
child<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
child <span class="token keyword">instanceof</span> <span class="token class-name">Parent</span> <span class="token comment">// true</span>
</code></pre></div><h2 id="\u624B\u5199call" tabindex="-1">\u624B\u5199call <a class="header-anchor" href="#\u624B\u5199call" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  ctx<span class="token operator">=</span>ctx<span class="token operator">||</span>window
  ctx<span class="token punctuation">.</span>fn<span class="token operator">=</span><span class="token keyword">this</span>
  <span class="token keyword">const</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> res<span class="token operator">=</span>ctx<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> ctx<span class="token punctuation">.</span>fn
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u624B\u5199apply" tabindex="-1">\u624B\u5199apply <a class="header-anchor" href="#\u624B\u5199apply" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 ctx<span class="token operator">=</span>ctx<span class="token operator">||</span>window
 ctx<span class="token punctuation">.</span>fn<span class="token operator">=</span><span class="token keyword">this</span>
 <span class="token keyword">let</span> res<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    res<span class="token operator">=</span>ctx<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    res<span class="token operator">=</span>ctx<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span> ctx<span class="token punctuation">.</span>fn
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u624B\u5199bind" tabindex="-1">\u624B\u5199bind <a class="header-anchor" href="#\u624B\u5199bind" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Error&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
  <span class="token keyword">const</span> _this<span class="token operator">=</span><span class="token keyword">this</span>
  <span class="token keyword">const</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">_this</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">_this</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,16),e=[o];function c(l,u,k,i,r,d){return a(),s("div",null,e)}var w=n(p,[["render",c]]);export{y as __pageData,w as default};
